{"version":3,"sources":["contexts/BalanceContext.tsx","components/Balance.tsx","contexts/TransactionsContext.tsx","components/Modal.tsx","components/NewTransaction.tsx","components/Transaction.tsx","App.tsx","index.tsx"],"names":["BalanceContext","createContext","BalanceProvider","children","useState","total","setTotal","expense","setExpense","income","setIncome","Provider","value","addBalance","previousValue","Number","previousPrice","removeBalance","Balance","useContext","id","className","src","alt","TransactionsContext","TransactionsProvider","ModalActive","setModalActive","InputDescription","setInputDescription","InputAmount","setInputAmount","InputDate","setInputDate","addTrans","setAddTrans","newTransaction","description","amount","date","newTrans","key","Modal","nanoid","onSubmit","e","target","reset","preventDefault","resetValues","htmlFor","type","name","placeholder","onChange","setDescription","step","setAmount","setDate","href","onClick","alert","toFixed","addTransaction","NewTransaction","find","transaction","updatedTrans","filter","removeTransaction","Transaction","transactionList","map","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.89358f64.chunk.js","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { TransactionsContext } from \"./TransactionsContext\";\r\n\r\ninterface BalanceContextData {\r\n    total: number;\r\n    setTotal: React.Dispatch<React.SetStateAction<number>>;\r\n    expense: number;\r\n    setExpense: React.Dispatch<React.SetStateAction<number>>;\r\n    income: number;\r\n    setIncome: React.Dispatch<React.SetStateAction<number>>;\r\n    addBalance: (value: number) => void;\r\n    removeBalance: (value: number) => void;\r\n}\r\n\r\ninterface BalanceProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const BalanceContext = createContext({} as BalanceContextData);\r\n\r\nfunction BalanceProvider({children}: BalanceProviderProps) {\r\n    const [total, setTotal] = useState(0);\r\n\r\n    const [expense, setExpense] = useState(0);\r\n\r\n    const [income, setIncome] = useState(0);\r\n\r\n    function addBalance(value: number) {\r\n        if(value > 0){\r\n            setIncome(previousValue => previousValue + Number(value));\r\n            setTotal(previousPrice => previousPrice + Number(value));\r\n        } else if (value < 0) {\r\n            setExpense(previousValue => previousValue + Number(value));\r\n            setTotal(previousValue => previousValue + Number(value));\r\n        }\r\n    }\r\n\r\n\r\n    function removeBalance(value: number) {\r\n        if(value > 0){\r\n            setIncome(previousValue => previousValue - Number(value));\r\n            setTotal(previousPrice => previousPrice - Number(value));\r\n        } else if (value < 0) {\r\n            setExpense(previousValue => previousValue - Number(value));\r\n            setTotal(previousValue => previousValue - Number(value));\r\n        }\r\n    }\r\n\r\n\r\n    return(\r\n        <BalanceContext.Provider value={{\r\n            setTotal,\r\n            total,\r\n            expense,\r\n            income,\r\n            setExpense,\r\n            setIncome,\r\n            addBalance,\r\n            removeBalance\r\n        }}>\r\n            {children}\r\n        </BalanceContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BalanceProvider;","import React, { useContext } from 'react';\r\nimport { BalanceContext } from '../contexts/BalanceContext';\r\n\r\n\r\nconst Balance = () => {\r\n    const { expense, income, total } = useContext(BalanceContext);\r\n\r\n    return (\r\n        <section id=\"balance\">\r\n        <h2 className=\"sr-only\">Balanço</h2>\r\n        <div className=\"card\">\r\n            <h3>\r\n                <span>\r\n                Entradas\r\n                </span>\r\n                <img src='./assets/income.svg' alt=\"Imagem de Entradas\"/>\r\n            </h3>\r\n            <p id=\"incomeDisplay\">R$ {income}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n            <h3>\r\n                <span>\r\n                    Saídas\r\n                </span>\r\n                <img src='./assets/minus.svg' alt=\"Imagem de Saídas\"/>\r\n            </h3>\r\n            <p id=\"expenseDisplay\">R$ {expense}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n            <h3>\r\n                <span>\r\n                    Total\r\n                </span>\r\n                <img src='./assets/total.svg' alt=\"Imagem do Total\"/>\r\n            </h3>\r\n            <p id=\"totalDisplay\">R$ {total}</p>\r\n        </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Balance;","import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { BalanceContext } from \"./BalanceContext\";\r\n\r\ninterface TransactionsProviderData{\r\n    InputDescription: string;\r\n    setInputDescription: React.Dispatch<React.SetStateAction<string>>;\r\n    InputAmount: number;\r\n    setInputAmount: React.Dispatch<React.SetStateAction<number>>\r\n    InputDate: string;\r\n    setInputDate: React.Dispatch<React.SetStateAction<string>>;\r\n    ModalActive: boolean;\r\n    setModalActive: React.Dispatch<React.SetStateAction<boolean>>;\r\n    newTransaction: (description: any, amount: any, date: any, id: any) => void;\r\n    addTrans: any[];\r\n    setAddTrans: React.Dispatch<React.SetStateAction<any>>;\r\n}\r\n\r\ninterface TransactionsProviderProps{\r\n    children: ReactNode;\r\n}   \r\n\r\n\r\nexport const TransactionsContext = createContext({} as TransactionsProviderData);\r\n\r\nexport default function TransactionsProvider({children}: TransactionsProviderProps){\r\n    const [ModalActive, setModalActive] = useState(false);\r\n\r\n    const [InputDescription, setInputDescription] = useState('');\r\n\r\n    const [InputAmount, setInputAmount] = useState(0);\r\n\r\n    const [InputDate, setInputDate] = useState('');\r\n\r\n    const [addTrans, setAddTrans]: \r\n    [any[], React.Dispatch<React.SetStateAction<any>>]  = useState([]);\r\n\r\n\r\n    function newTransaction(description: any, amount: number, date: any, id: any){\r\n        const newTrans = {\r\n            id: id,\r\n            key: id,\r\n            description: description,\r\n            amount: amount,\r\n            date: date\r\n        }\r\n        setAddTrans([... addTrans, newTrans]);\r\n    };\r\n    \r\n\r\n    return(\r\n        <TransactionsContext.Provider value={{\r\n            InputDescription,\r\n            setInputDescription,\r\n            InputAmount,\r\n            setInputAmount,\r\n            InputDate,\r\n            setInputDate,\r\n            ModalActive,\r\n            setModalActive,\r\n            newTransaction,\r\n            setAddTrans,\r\n            addTrans\r\n        }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    )\r\n}","import { nanoid } from 'nanoid';\r\nimport React, { useContext } from 'react';\r\nimport { BalanceContext } from '../contexts/BalanceContext';\r\nimport { TransactionsContext } from '../contexts/TransactionsContext';\r\n\r\n\r\nconst Modal = () => {\r\n    const {\r\n            setModalActive, \r\n            InputDescription,\r\n            setInputDescription, \r\n            InputAmount,\r\n            setInputAmount, \r\n            InputDate,\r\n            setInputDate,\r\n            newTransaction\r\n        } = useContext(TransactionsContext);\r\n\r\n        const { addBalance } = useContext(BalanceContext);\r\n\r\n        const id = \"transaction-\" + nanoid();\r\n\r\n\r\n        const setDescription = (e: any) => {\r\n            setInputDescription(e.target.value)\r\n        }\r\n\r\n        const setAmount = (e: any) => {\r\n            setInputAmount(e.target.value)\r\n        }\r\n\r\n        const setDate = (e: any) => {\r\n            setInputDate(e.target.value)\r\n        }\r\n\r\n        function resetValues(e: any) {\r\n            e.target.reset();\r\n            e.preventDefault();\r\n\r\n            setInputDescription('');\r\n            setInputAmount(0);\r\n            setInputDate('');\r\n        }\r\n\r\n        \r\n        function addTransaction(e: any) {\r\n            if(InputDescription === '' || InputDate === '' || InputAmount === 0){\r\n                alert('Preencha todos os campos Por favor!')\r\n                e.preventDefault();\r\n            } else {\r\n                newTransaction(InputDescription, Number(InputAmount).toFixed(2), InputDate, id);\r\n                setModalActive(false);\r\n                const value = Number(InputAmount).toFixed(2)\r\n                InputAmount > 0 ? addBalance(Number(value)) : addBalance(Number(value))\r\n            }\r\n        }\r\n\r\n    return (        \r\n        <div className=\"modal\">     \r\n            <div id=\"form\">\r\n                <h2>Nova Transação</h2>\r\n                <form onSubmit={e => resetValues(e)}>   \r\n                    <div className=\"input-group\">\r\n                        <label className=\"sr-only\" htmlFor=\"description\">Descrição</label>\r\n                            <input \r\n                                type=\"text\"\r\n                                id=\"description\"\r\n                                name=\"description\"\r\n                                placeholder=\"Descrição\"\r\n                                onChange={(e) => setDescription(e)}                                \r\n                            />\r\n                    </div>       \r\n                    <div className=\"input-group\">\r\n                        <label className=\"sr-only\" htmlFor=\"amount\">Valor</label>\r\n                            <input \r\n                                type=\"number\"\r\n                                step=\"0.01\"\r\n                                id=\"amount\"\r\n                                name=\"amount\"\r\n                                placeholder=\"0,00\"\r\n                                onChange={(e) => setAmount(e)}\r\n                            />\r\n                    </div>        \r\n                    <div className=\"input-group\">\r\n                        <label className=\"sr-only\" htmlFor=\"date\">Data</label>\r\n                            <input \r\n                            type=\"date\"\r\n                            id=\"date\"\r\n                            name=\"date\"\r\n                            onChange={(e) => setDate(e)}\r\n                            />\r\n                    </div>  \r\n                    <div className=\"input-group actions\">\r\n                        <a href=\"#\" className=\"button cancel\" onClick={() => setModalActive(false)}>Cancelar</a>\r\n                        <button \r\n                            type=\"submit\"\r\n                            onClick={(e) => addTransaction(e)}\r\n                        >\r\n                        Salvar\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import React, { useContext } from 'react';\r\nimport { BalanceContext } from '../contexts/BalanceContext';\r\nimport { TransactionsContext } from '../contexts/TransactionsContext';\r\n\r\ninterface NewTransactionProps{\r\n    InputDescription: string;\r\n    InputAmount: number;\r\n    InputDate: string;\r\n    id: any;\r\n}\r\n\r\nconst NewTransaction = ({\r\n        InputDescription, \r\n        InputAmount, \r\n        InputDate, \r\n        id,\r\n    }: NewTransactionProps) => {\r\n    const { addTrans, setAddTrans } = useContext(TransactionsContext);\r\n    const { removeBalance } = useContext(BalanceContext);\r\n\r\n    function removeTransaction(id: any){\r\n        const value = addTrans.find(transaction => transaction.id === id);\r\n        removeBalance(value.amount);\r\n\r\n        const updatedTrans = addTrans\r\n        .filter(transaction => transaction.id !== id);\r\n\r\n        setAddTrans(updatedTrans);\r\n    }\r\n\r\n    return (\r\n        <tr id={id}>\r\n            <td className=\"description\">{InputDescription}</td>\r\n            <td className={InputAmount > 0 ? \"income\" : \"expense\"}>{InputAmount}</td>\r\n            <td className=\"date\">{InputDate}</td>\r\n            <td>\r\n                <img \r\n                    src='./assets/minus.svg' \r\n                    alt=\"Remover transação\"\r\n                    onClick={() => removeTransaction(id)}\r\n                />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default NewTransaction;","import React, { useContext } from 'react';\r\nimport { TransactionsContext } from '../contexts/TransactionsContext';\r\nimport Modal from './Modal';\r\nimport NewTransaction from './NewTransaction';\r\n\r\nconst Transaction = () => {\r\n    const {\r\n            ModalActive, \r\n            setModalActive,\r\n            addTrans\r\n        } = useContext(TransactionsContext);\r\n\r\n\r\n        const transactionList = addTrans.map(transaction => (\r\n            <NewTransaction \r\n                InputDescription={transaction.description}\r\n                InputAmount={transaction.amount}\r\n                InputDate={transaction.date}\r\n                id={transaction.id}\r\n                key={transaction.key}\r\n            />\r\n            )\r\n        )\r\n\r\n    \r\n    return (\r\n        <section id=\"transactions\">        \r\n            <h2 className=\"sr-only\">\r\n                Transações\r\n            </h2>\r\n\r\n            <a \r\n                href=\"#\" \r\n                className=\"button new\" \r\n                onClick={() => setModalActive(true)}\r\n            >\r\n                + Nova Transação\r\n            </a>\r\n            \r\n            <table id=\"data-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Descrição</th>\r\n                        <th>Valor</th>\r\n                        <th>Data</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transactionList}\r\n                </tbody>\r\n\r\n            </table>\r\n                <div \r\n                    className={(ModalActive === false)\r\n                    ? 'modal-overlay' \r\n                    : 'modal-overlay active'\r\n                    }>\r\n                <Modal />\r\n                </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Transaction;","import React from 'react';\nimport './App.css';\n// Components\nimport Balance from './components/Balance';\nimport Transaction from './components/Transaction';\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header>\n        <img src='./assets/logo.svg' alt=\"logo\"/>\n      </header>\n\n      <main className=\"container\">\n        <Balance />\n      </main>      \n      \n        <Transaction /> \n\n      <footer>\n        <p>dev.finance$</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport BalanceProvider from './contexts/BalanceContext';\nimport TransactionsProvider from './contexts/TransactionsContext';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TransactionsProvider>\n\n      <BalanceProvider>\n\n        <App />\n        \n      </BalanceProvider>\n\n    </TransactionsProvider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}