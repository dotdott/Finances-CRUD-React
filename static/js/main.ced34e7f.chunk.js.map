{"version":3,"sources":["contexts/BalanceContext.tsx","components/Balance.tsx","contexts/TransactionsContext.tsx","components/Modal.tsx","components/NewTransaction.tsx","components/Transaction.tsx","App.tsx","index.tsx"],"names":["BalanceContext","createContext","BalanceProvider","children","useState","total","setTotal","expense","setExpense","income","setIncome","values","setValues","addBalance","value","previousValue","Number","previousPrice","balance","map","newValue","toFixed","useEffect","Axios","get","db","then","data","Provider","removeBalance","Balance","useContext","id","className","src","process","alt","TransactionsContext","TransactionsProvider","ModalActive","setModalActive","InputDescription","setInputDescription","InputAmount","setInputAmount","InputDate","setInputDate","addTrans","setAddTrans","Modal","result","onSubmit","e","target","reset","preventDefault","resetValues","htmlFor","type","name","placeholder","onChange","setDescription","step","setAmount","setDate","href","onClick","alert","post","description","date","addTransaction","NewTransaction","find","transaction","delete","removeTransaction","Transaction","transactionList","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ced34e7f.chunk.js","sourcesContent":["import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport Axios from 'axios';\r\nimport { TransactionsContext } from \"./TransactionsContext\";\r\n\r\ninterface BalanceContextData {\r\n    total: number;\r\n    setTotal: React.Dispatch<React.SetStateAction<number>>;\r\n    expense: number;\r\n    setExpense: React.Dispatch<React.SetStateAction<number>>;\r\n    income: number;\r\n    setIncome: React.Dispatch<React.SetStateAction<number>>;\r\n    addBalance: (value: number) => void;\r\n    removeBalance: (value: number) => void;\r\n    setValues: React.Dispatch<React.SetStateAction<any>>;\r\n    values: any[];\r\n    balance: () => void;\r\n}\r\n\r\ninterface BalanceProviderProps{\r\n    children: ReactNode;\r\n}\r\n\r\nexport const BalanceContext = createContext({} as BalanceContextData);\r\n\r\nfunction BalanceProvider({children}: BalanceProviderProps) {\r\n    const [total, setTotal] = useState(0);\r\n\r\n    const [expense, setExpense] = useState(0);\r\n\r\n    const [income, setIncome] = useState(0);\r\n\r\n    const [values, setValues] = useState<any[]>([]);\r\n\r\n    const db = 'https://crud-finances-heroku.herokuapp.com';\r\n\r\n    useEffect(() => {\r\n        Axios.get(db + '/balance/get')\r\n         .then(data => {\r\n             setValues(data.data)\r\n         })\r\n     }, [])\r\n\r\n\r\n\r\n    function addBalance(value: number) {\r\n        if(value > 0){\r\n            setIncome(previousValue => previousValue + Number(value));\r\n            setTotal(previousPrice => previousPrice + Number(value));\r\n        } else if (value < 0) {\r\n            setExpense(previousValue => previousValue + Number(value));\r\n            setTotal(previousValue => previousValue + Number(value));\r\n        }\r\n    }\r\n\r\n    function balance(){\r\n        values.map(value => {\r\n            const newValue = Number(value.value).toFixed(2);\r\n            addBalance(Number(newValue));\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        balance();\r\n    },[values])\r\n\r\n    function removeBalance(value: number) {\r\n        if(value > 0){\r\n            setIncome(previousValue => previousValue - Number(value));\r\n            setTotal(previousPrice => previousPrice - Number(value));\r\n        } else if (value < 0) {\r\n            setExpense(previousValue => previousValue - Number(value));\r\n            setTotal(previousValue => previousValue - Number(value));\r\n        }\r\n    }\r\n\r\n    return(\r\n        <BalanceContext.Provider value={{\r\n            setTotal,\r\n            total,\r\n            expense,\r\n            income,\r\n            setExpense,\r\n            setIncome,\r\n            addBalance,\r\n            removeBalance,\r\n            setValues,\r\n            values,\r\n            balance\r\n        }}>\r\n            {children}\r\n        </BalanceContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BalanceProvider;","import React, { useContext } from 'react';\r\nimport { BalanceContext } from '../contexts/BalanceContext';\r\n\r\nconst Balance = () => {\r\n    const { expense, income, total } = useContext(BalanceContext);\r\n\r\n    return (\r\n        <section id=\"balance\">\r\n        <h2 className=\"sr-only\">Balanço</h2>\r\n        <div className=\"card\">\r\n            <h3>\r\n                <span>\r\n                Entradas\r\n                </span>\r\n                <img src={process.env.PUBLIC_URL + '/assets/income.svg'} alt=\"Imagem de Entradas\"/>\r\n            </h3>\r\n            <p id=\"incomeDisplay\">R$ {income}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n            <h3>\r\n                <span>\r\n                    Saídas\r\n                </span>\r\n                <img src={process.env.PUBLIC_URL + '/assets/minus.svg'} alt=\"Imagem de Saídas\"/>\r\n            </h3>\r\n            <p id=\"expenseDisplay\">R$ {expense}</p>\r\n        </div>\r\n        <div className=\"card\">\r\n            <h3>\r\n                <span>\r\n                    Total\r\n                </span>\r\n                <img src={process.env.PUBLIC_URL + '/assets/total.svg'} alt=\"Imagem do Total\"/>\r\n            </h3>\r\n            <p id=\"totalDisplay\">R$ {total}</p>\r\n        </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Balance;","import { createContext, ReactNode, useState } from \"react\";\r\n\r\ninterface TransactionsProviderData{\r\n    InputDescription: string;\r\n    setInputDescription: React.Dispatch<React.SetStateAction<string>>;\r\n    InputAmount: number;\r\n    setInputAmount: React.Dispatch<React.SetStateAction<number>>\r\n    InputDate: string;\r\n    setInputDate: React.Dispatch<React.SetStateAction<string>>;\r\n    ModalActive: boolean;\r\n    setModalActive: React.Dispatch<React.SetStateAction<boolean>>;\r\n    addTrans: any[];\r\n    setAddTrans: React.Dispatch<React.SetStateAction<any>>;\r\n}\r\n\r\ninterface TransactionsProviderProps{\r\n    children: ReactNode;\r\n}   \r\n\r\n\r\nexport const TransactionsContext = createContext({} as TransactionsProviderData);\r\n\r\nexport default function TransactionsProvider({children}: TransactionsProviderProps){\r\n    const [ModalActive, setModalActive] = useState(false);\r\n\r\n    const [InputDescription, setInputDescription] = useState('');\r\n\r\n    const [InputAmount, setInputAmount] = useState(0);\r\n\r\n    const [InputDate, setInputDate] = useState('');\r\n\r\n    const [addTrans, setAddTrans]: \r\n    [any[], React.Dispatch<React.SetStateAction<any>>]  = useState([]);\r\n\r\n    return(\r\n        <TransactionsContext.Provider value={{\r\n            InputDescription,\r\n            setInputDescription,\r\n            InputAmount,\r\n            setInputAmount,\r\n            InputDate,\r\n            setInputDate,\r\n            ModalActive,\r\n            setModalActive,\r\n            setAddTrans,\r\n            addTrans\r\n        }}>\r\n            {children}\r\n        </TransactionsContext.Provider>\r\n    )\r\n}","import Axios from 'axios';\r\nimport { useContext, useEffect } from 'react';\r\nimport { BalanceContext } from '../contexts/BalanceContext';\r\nimport { TransactionsContext } from '../contexts/TransactionsContext';\r\n\r\n\r\nconst Modal = () => {\r\n    const {\r\n            setModalActive, \r\n            InputDescription,\r\n            setInputDescription, \r\n            InputAmount,\r\n            setInputAmount, \r\n            InputDate,\r\n            setInputDate,\r\n            addTrans,\r\n            setAddTrans\r\n        } = useContext(TransactionsContext);\r\n\r\n        const { balance } = useContext(BalanceContext);\r\n\r\n        const setDescription = (e: any) => {\r\n            setInputDescription(e.target.value)\r\n        }\r\n\r\n        const setAmount = (e: any) => {\r\n            setInputAmount(e.target.value)\r\n        }\r\n\r\n        const setDate = (e: any) => {\r\n            setInputDate(e.target.value)\r\n        }\r\n\r\n        function resetValues(e: any) {\r\n            e.target.reset();\r\n            e.preventDefault();\r\n\r\n            setInputDescription('');\r\n            setInputAmount(0);\r\n            setInputDate('');\r\n        }\r\n\r\n        const db = 'https://crud-finances-heroku.herokuapp.com';\r\n\r\n        function addTransaction(e: any) {\r\n            if(InputDescription === '' || InputDate === '' || InputAmount === 0){\r\n                alert('Preencha todos os campos Por favor!')\r\n                e.preventDefault();\r\n            } else {\r\n                Axios.post(db + '/transaction/add', {\r\n                    description: InputDescription,\r\n                    value: InputAmount,\r\n                    date: InputDate\r\n                })\r\n                setModalActive(false);\r\n\r\n                Axios.post(db + '/balance/add', {\r\n                    value: InputAmount\r\n                })\r\n            }\r\n        }\r\n\r\n        useEffect(() => {\r\n            Axios.get(db + '/transaction/get')\r\n            .then(result => {\r\n                setAddTrans(result.data);\r\n            });\r\n        }, [addTrans])\r\n\r\n        useEffect(() => {\r\n            balance();\r\n        }, [])\r\n\r\n    return (        \r\n        <div className=\"modal\">     \r\n            <div id=\"form\">\r\n                <h2>Nova Transação</h2>\r\n                <form onSubmit={e => resetValues(e)}>   \r\n                    <div className=\"input-group\">\r\n                        <label className=\"sr-only\" htmlFor=\"description\">Descrição</label>\r\n                            <input \r\n                                type=\"text\"\r\n                                id=\"description\"\r\n                                name=\"description\"\r\n                                placeholder=\"Descrição\"\r\n                                onChange={(e) => setDescription(e)}                                \r\n                            />\r\n                    </div>       \r\n                    <div className=\"input-group\">\r\n                        <label className=\"sr-only\" htmlFor=\"amount\">Valor</label>\r\n                            <input \r\n                                type=\"number\"\r\n                                step=\"0.01\"\r\n                                id=\"amount\"\r\n                                name=\"amount\"\r\n                                placeholder=\"0,00\"\r\n                                onChange={(e) => setAmount(e)}\r\n                            />\r\n                    </div>        \r\n                    <div className=\"input-group\">\r\n                        <label className=\"sr-only\" htmlFor=\"date\">Data</label>\r\n                            <input \r\n                            type=\"date\"\r\n                            id=\"date\"\r\n                            name=\"date\"\r\n                            onChange={(e) => setDate(e)}\r\n                            />\r\n                    </div>  \r\n                    <div className=\"input-group actions\">\r\n                        <a href=\"#\" className=\"button cancel\" onClick={() => setModalActive(false)}>Cancelar</a>\r\n                        <button \r\n                            type=\"submit\"\r\n                            onClick={(e) => addTransaction(e)}\r\n                        >\r\n                        Salvar\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal;","import { useContext, useEffect, useState } from 'react';\r\nimport { BalanceContext } from '../contexts/BalanceContext';\r\nimport { TransactionsContext } from '../contexts/TransactionsContext';\r\nimport Axios from 'axios';\r\n\r\ninterface NewTransactionProps{\r\n    InputDescription: string;\r\n    InputAmount: number;\r\n    InputDate: string;\r\n    id: any;\r\n}\r\n\r\nconst NewTransaction = ({\r\n        InputDescription, \r\n        InputAmount, \r\n        InputDate, \r\n        id,\r\n    }: NewTransactionProps) => {\r\n    const { addTrans } = useContext(TransactionsContext);\r\n\r\n    const { removeBalance} = useContext(BalanceContext);\r\n\r\n    const db = 'https://crud-finances-heroku.herokuapp.com';\r\n\r\n    function removeTransaction(id: any){\r\n        const value = addTrans.find((transaction: any) => transaction.id === id);\r\n        removeBalance(value);\r\n\r\n        Axios.delete(db + `/balance/delete/${id}`)\r\n        Axios.delete(db + `/transaction/delete/${id}`)\r\n    }\r\n\r\n    return (\r\n        <tr id={id}>\r\n            <td className=\"description\">{InputDescription}</td>\r\n            <td className={InputAmount > 0 ? \"income\" : \"expense\"}>{InputAmount}</td>\r\n            <td className=\"date\">{InputDate}</td>\r\n            <td>\r\n                <img \r\n                    src={process.env.PUBLIC_URL + '/assets/minus.svg'}\r\n                    alt=\"Remover transação\"\r\n                    onClick={() => removeTransaction(id)}\r\n                />\r\n            </td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default NewTransaction;","import { useContext } from 'react';\r\nimport { TransactionsContext } from '../contexts/TransactionsContext';\r\nimport Modal from './Modal';\r\nimport NewTransaction from './NewTransaction';\r\n\r\nconst Transaction = () => {\r\n    const {\r\n            ModalActive, \r\n            setModalActive,\r\n            addTrans\r\n        } = useContext(TransactionsContext);\r\n\r\n\r\n        const transactionList = addTrans.map((transaction: any) => (\r\n                <NewTransaction \r\n                InputDescription={transaction.description}\r\n                InputAmount={transaction.value}\r\n                InputDate={transaction.date}\r\n                id={transaction.id}\r\n                key={transaction.id}\r\n                />\r\n            )\r\n        )\r\n\r\n    \r\n    return (\r\n        <section id=\"transactions\">        \r\n            <h2 className=\"sr-only\">\r\n                Transações\r\n            </h2>\r\n\r\n            <a \r\n                href=\"#\" \r\n                className=\"button new\" \r\n                onClick={() => setModalActive(true)}\r\n            >\r\n                + Nova Transação\r\n            </a>\r\n            \r\n            <table id=\"data-table\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Descrição</th>\r\n                        <th>Valor</th>\r\n                        <th>Data</th>\r\n                        <th></th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {transactionList}\r\n                </tbody>\r\n\r\n            </table>\r\n                <div \r\n                    className={(ModalActive === false)\r\n                    ? 'modal-overlay' \r\n                    : 'modal-overlay active'\r\n                    }>\r\n                <Modal />\r\n                </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Transaction;","import React from 'react';\r\nimport './App.css';\r\n// Components\r\nimport Balance from './components/Balance';\r\nimport Transaction from './components/Transaction';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <img src={process.env.PUBLIC_URL + '/assets/logo.svg'} alt=\"logo\"/>\r\n      </header>\r\n\r\n      <main className=\"container\">\r\n        <Balance />\r\n      </main>      \r\n      \r\n        <Transaction /> \r\n\r\n      <footer>\r\n        <p>dev.finance$</p>\r\n      </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport BalanceProvider from './contexts/BalanceContext';\r\nimport TransactionsProvider from './contexts/TransactionsContext';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <TransactionsProvider>\r\n\r\n      <BalanceProvider>\r\n\r\n        <App />\r\n        \r\n      </BalanceProvider>\r\n\r\n    </TransactionsProvider>\r\n\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}